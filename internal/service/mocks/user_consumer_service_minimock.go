// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package mocks

//go:generate minimock -i go-auth/internal/service.UserConsumerService -o user_consumer_service_minimock.go -n UserConsumerServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// UserConsumerServiceMock implements mm_service.UserConsumerService
type UserConsumerServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcRunConsumer          func(ctx context.Context) (err error)
	funcRunConsumerOrigin    string
	inspectFuncRunConsumer   func(ctx context.Context)
	afterRunConsumerCounter  uint64
	beforeRunConsumerCounter uint64
	RunConsumerMock          mUserConsumerServiceMockRunConsumer
}

// NewUserConsumerServiceMock returns a mock for mm_service.UserConsumerService
func NewUserConsumerServiceMock(t minimock.Tester) *UserConsumerServiceMock {
	m := &UserConsumerServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.RunConsumerMock = mUserConsumerServiceMockRunConsumer{mock: m}
	m.RunConsumerMock.callArgs = []*UserConsumerServiceMockRunConsumerParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserConsumerServiceMockRunConsumer struct {
	optional           bool
	mock               *UserConsumerServiceMock
	defaultExpectation *UserConsumerServiceMockRunConsumerExpectation
	expectations       []*UserConsumerServiceMockRunConsumerExpectation

	callArgs []*UserConsumerServiceMockRunConsumerParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// UserConsumerServiceMockRunConsumerExpectation specifies expectation struct of the UserConsumerService.RunConsumer
type UserConsumerServiceMockRunConsumerExpectation struct {
	mock               *UserConsumerServiceMock
	params             *UserConsumerServiceMockRunConsumerParams
	paramPtrs          *UserConsumerServiceMockRunConsumerParamPtrs
	expectationOrigins UserConsumerServiceMockRunConsumerExpectationOrigins
	results            *UserConsumerServiceMockRunConsumerResults
	returnOrigin       string
	Counter            uint64
}

// UserConsumerServiceMockRunConsumerParams contains parameters of the UserConsumerService.RunConsumer
type UserConsumerServiceMockRunConsumerParams struct {
	ctx context.Context
}

// UserConsumerServiceMockRunConsumerParamPtrs contains pointers to parameters of the UserConsumerService.RunConsumer
type UserConsumerServiceMockRunConsumerParamPtrs struct {
	ctx *context.Context
}

// UserConsumerServiceMockRunConsumerResults contains results of the UserConsumerService.RunConsumer
type UserConsumerServiceMockRunConsumerResults struct {
	err error
}

// UserConsumerServiceMockRunConsumerOrigins contains origins of expectations of the UserConsumerService.RunConsumer
type UserConsumerServiceMockRunConsumerExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) Optional() *mUserConsumerServiceMockRunConsumer {
	mmRunConsumer.optional = true
	return mmRunConsumer
}

// Expect sets up expected params for UserConsumerService.RunConsumer
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) Expect(ctx context.Context) *mUserConsumerServiceMockRunConsumer {
	if mmRunConsumer.mock.funcRunConsumer != nil {
		mmRunConsumer.mock.t.Fatalf("UserConsumerServiceMock.RunConsumer mock is already set by Set")
	}

	if mmRunConsumer.defaultExpectation == nil {
		mmRunConsumer.defaultExpectation = &UserConsumerServiceMockRunConsumerExpectation{}
	}

	if mmRunConsumer.defaultExpectation.paramPtrs != nil {
		mmRunConsumer.mock.t.Fatalf("UserConsumerServiceMock.RunConsumer mock is already set by ExpectParams functions")
	}

	mmRunConsumer.defaultExpectation.params = &UserConsumerServiceMockRunConsumerParams{ctx}
	mmRunConsumer.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmRunConsumer.expectations {
		if minimock.Equal(e.params, mmRunConsumer.defaultExpectation.params) {
			mmRunConsumer.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRunConsumer.defaultExpectation.params)
		}
	}

	return mmRunConsumer
}

// ExpectCtxParam1 sets up expected param ctx for UserConsumerService.RunConsumer
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) ExpectCtxParam1(ctx context.Context) *mUserConsumerServiceMockRunConsumer {
	if mmRunConsumer.mock.funcRunConsumer != nil {
		mmRunConsumer.mock.t.Fatalf("UserConsumerServiceMock.RunConsumer mock is already set by Set")
	}

	if mmRunConsumer.defaultExpectation == nil {
		mmRunConsumer.defaultExpectation = &UserConsumerServiceMockRunConsumerExpectation{}
	}

	if mmRunConsumer.defaultExpectation.params != nil {
		mmRunConsumer.mock.t.Fatalf("UserConsumerServiceMock.RunConsumer mock is already set by Expect")
	}

	if mmRunConsumer.defaultExpectation.paramPtrs == nil {
		mmRunConsumer.defaultExpectation.paramPtrs = &UserConsumerServiceMockRunConsumerParamPtrs{}
	}
	mmRunConsumer.defaultExpectation.paramPtrs.ctx = &ctx
	mmRunConsumer.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmRunConsumer
}

// Inspect accepts an inspector function that has same arguments as the UserConsumerService.RunConsumer
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) Inspect(f func(ctx context.Context)) *mUserConsumerServiceMockRunConsumer {
	if mmRunConsumer.mock.inspectFuncRunConsumer != nil {
		mmRunConsumer.mock.t.Fatalf("Inspect function is already set for UserConsumerServiceMock.RunConsumer")
	}

	mmRunConsumer.mock.inspectFuncRunConsumer = f

	return mmRunConsumer
}

// Return sets up results that will be returned by UserConsumerService.RunConsumer
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) Return(err error) *UserConsumerServiceMock {
	if mmRunConsumer.mock.funcRunConsumer != nil {
		mmRunConsumer.mock.t.Fatalf("UserConsumerServiceMock.RunConsumer mock is already set by Set")
	}

	if mmRunConsumer.defaultExpectation == nil {
		mmRunConsumer.defaultExpectation = &UserConsumerServiceMockRunConsumerExpectation{mock: mmRunConsumer.mock}
	}
	mmRunConsumer.defaultExpectation.results = &UserConsumerServiceMockRunConsumerResults{err}
	mmRunConsumer.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmRunConsumer.mock
}

// Set uses given function f to mock the UserConsumerService.RunConsumer method
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) Set(f func(ctx context.Context) (err error)) *UserConsumerServiceMock {
	if mmRunConsumer.defaultExpectation != nil {
		mmRunConsumer.mock.t.Fatalf("Default expectation is already set for the UserConsumerService.RunConsumer method")
	}

	if len(mmRunConsumer.expectations) > 0 {
		mmRunConsumer.mock.t.Fatalf("Some expectations are already set for the UserConsumerService.RunConsumer method")
	}

	mmRunConsumer.mock.funcRunConsumer = f
	mmRunConsumer.mock.funcRunConsumerOrigin = minimock.CallerInfo(1)
	return mmRunConsumer.mock
}

// When sets expectation for the UserConsumerService.RunConsumer which will trigger the result defined by the following
// Then helper
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) When(ctx context.Context) *UserConsumerServiceMockRunConsumerExpectation {
	if mmRunConsumer.mock.funcRunConsumer != nil {
		mmRunConsumer.mock.t.Fatalf("UserConsumerServiceMock.RunConsumer mock is already set by Set")
	}

	expectation := &UserConsumerServiceMockRunConsumerExpectation{
		mock:               mmRunConsumer.mock,
		params:             &UserConsumerServiceMockRunConsumerParams{ctx},
		expectationOrigins: UserConsumerServiceMockRunConsumerExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmRunConsumer.expectations = append(mmRunConsumer.expectations, expectation)
	return expectation
}

// Then sets up UserConsumerService.RunConsumer return parameters for the expectation previously defined by the When method
func (e *UserConsumerServiceMockRunConsumerExpectation) Then(err error) *UserConsumerServiceMock {
	e.results = &UserConsumerServiceMockRunConsumerResults{err}
	return e.mock
}

// Times sets number of times UserConsumerService.RunConsumer should be invoked
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) Times(n uint64) *mUserConsumerServiceMockRunConsumer {
	if n == 0 {
		mmRunConsumer.mock.t.Fatalf("Times of UserConsumerServiceMock.RunConsumer mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmRunConsumer.expectedInvocations, n)
	mmRunConsumer.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmRunConsumer
}

func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) invocationsDone() bool {
	if len(mmRunConsumer.expectations) == 0 && mmRunConsumer.defaultExpectation == nil && mmRunConsumer.mock.funcRunConsumer == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmRunConsumer.mock.afterRunConsumerCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmRunConsumer.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// RunConsumer implements mm_service.UserConsumerService
func (mmRunConsumer *UserConsumerServiceMock) RunConsumer(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmRunConsumer.beforeRunConsumerCounter, 1)
	defer mm_atomic.AddUint64(&mmRunConsumer.afterRunConsumerCounter, 1)

	mmRunConsumer.t.Helper()

	if mmRunConsumer.inspectFuncRunConsumer != nil {
		mmRunConsumer.inspectFuncRunConsumer(ctx)
	}

	mm_params := UserConsumerServiceMockRunConsumerParams{ctx}

	// Record call args
	mmRunConsumer.RunConsumerMock.mutex.Lock()
	mmRunConsumer.RunConsumerMock.callArgs = append(mmRunConsumer.RunConsumerMock.callArgs, &mm_params)
	mmRunConsumer.RunConsumerMock.mutex.Unlock()

	for _, e := range mmRunConsumer.RunConsumerMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmRunConsumer.RunConsumerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRunConsumer.RunConsumerMock.defaultExpectation.Counter, 1)
		mm_want := mmRunConsumer.RunConsumerMock.defaultExpectation.params
		mm_want_ptrs := mmRunConsumer.RunConsumerMock.defaultExpectation.paramPtrs

		mm_got := UserConsumerServiceMockRunConsumerParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmRunConsumer.t.Errorf("UserConsumerServiceMock.RunConsumer got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmRunConsumer.RunConsumerMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRunConsumer.t.Errorf("UserConsumerServiceMock.RunConsumer got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmRunConsumer.RunConsumerMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRunConsumer.RunConsumerMock.defaultExpectation.results
		if mm_results == nil {
			mmRunConsumer.t.Fatal("No results are set for the UserConsumerServiceMock.RunConsumer")
		}
		return (*mm_results).err
	}
	if mmRunConsumer.funcRunConsumer != nil {
		return mmRunConsumer.funcRunConsumer(ctx)
	}
	mmRunConsumer.t.Fatalf("Unexpected call to UserConsumerServiceMock.RunConsumer. %v", ctx)
	return
}

// RunConsumerAfterCounter returns a count of finished UserConsumerServiceMock.RunConsumer invocations
func (mmRunConsumer *UserConsumerServiceMock) RunConsumerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunConsumer.afterRunConsumerCounter)
}

// RunConsumerBeforeCounter returns a count of UserConsumerServiceMock.RunConsumer invocations
func (mmRunConsumer *UserConsumerServiceMock) RunConsumerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRunConsumer.beforeRunConsumerCounter)
}

// Calls returns a list of arguments used in each call to UserConsumerServiceMock.RunConsumer.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRunConsumer *mUserConsumerServiceMockRunConsumer) Calls() []*UserConsumerServiceMockRunConsumerParams {
	mmRunConsumer.mutex.RLock()

	argCopy := make([]*UserConsumerServiceMockRunConsumerParams, len(mmRunConsumer.callArgs))
	copy(argCopy, mmRunConsumer.callArgs)

	mmRunConsumer.mutex.RUnlock()

	return argCopy
}

// MinimockRunConsumerDone returns true if the count of the RunConsumer invocations corresponds
// the number of defined expectations
func (m *UserConsumerServiceMock) MinimockRunConsumerDone() bool {
	if m.RunConsumerMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.RunConsumerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.RunConsumerMock.invocationsDone()
}

// MinimockRunConsumerInspect logs each unmet expectation
func (m *UserConsumerServiceMock) MinimockRunConsumerInspect() {
	for _, e := range m.RunConsumerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserConsumerServiceMock.RunConsumer at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterRunConsumerCounter := mm_atomic.LoadUint64(&m.afterRunConsumerCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.RunConsumerMock.defaultExpectation != nil && afterRunConsumerCounter < 1 {
		if m.RunConsumerMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to UserConsumerServiceMock.RunConsumer at\n%s", m.RunConsumerMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to UserConsumerServiceMock.RunConsumer at\n%s with params: %#v", m.RunConsumerMock.defaultExpectation.expectationOrigins.origin, *m.RunConsumerMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRunConsumer != nil && afterRunConsumerCounter < 1 {
		m.t.Errorf("Expected call to UserConsumerServiceMock.RunConsumer at\n%s", m.funcRunConsumerOrigin)
	}

	if !m.RunConsumerMock.invocationsDone() && afterRunConsumerCounter > 0 {
		m.t.Errorf("Expected %d calls to UserConsumerServiceMock.RunConsumer at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.RunConsumerMock.expectedInvocations), m.RunConsumerMock.expectedInvocationsOrigin, afterRunConsumerCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserConsumerServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockRunConsumerInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserConsumerServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserConsumerServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockRunConsumerDone()
}
